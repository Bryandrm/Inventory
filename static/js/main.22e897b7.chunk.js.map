{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Spend.js","components/List.js","helper.js","components/InventoryControl.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Question","saveInventory","saveLefting","updateQuestion","useState","cantidad","guardarCantidad","error","SaveError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","saveSpend","saveCreateSpend","name","saveName","quantity","saveQuantity","saveError","trim","spend","id","shortid","generate","Spend","List","spends","map","key","checkInventory","inventory","lefting","InventoryControl","App","showQuestion","saveSpends","createSpend","useEffect","inventoryLefting","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.22e897b7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Error = ({mensaje}) =>(\n    <p className=\"alert alert-danger error\">\n      {mensaje}\n    </p>\n)\n\nexport default Error","import React, { Fragment, useState } from 'react';\nimport Error from './Error'\n\n\n\nconst Question = ({saveInventory, saveLefting, updateQuestion}) => {\n    //define inventory\n    const [ cantidad, guardarCantidad]= useState(0);\n    const [error, SaveError]= useState(false);\n\n    // Read Inventory\n    const definirPresupuesto = e => {\n        guardarCantidad(parseInt(e.target.value, 10));\n    }\n\n    //submit to define inventory\n    const agregarPresupuesto = e =>{\n        e.preventDefault();\n\n        //validate\n        if(cantidad<1 || isNaN(cantidad)){\n            SaveError(true);\n            return\n        }\n        //success\n\n        SaveError(false);\n        saveInventory(cantidad)\n        saveLefting(cantidad)\n        updateQuestion(false);\n    }\n\n    return(\n        <Fragment>\n                <h2> Set your inventory </h2>\n\n                {error ? <Error mensaje=\"Inventory is invalid\" />: null}\n                \n            <form\n                onSubmit={agregarPresupuesto}\n            >\n                <input\n                    type=\"number\"\n                    className=\"u-full-width\"\n                    placeholder=\"Coloca tu presupuesto\"     \n                    onChange={definirPresupuesto}       \n                />\n\n                <input \n                type=\"submit\"\n                className=\"button-primary u-full-width\"\n                value=\"Set Inventory\"\n                />\n\n            </form>\n        </Fragment>\n    );\n}\n\nexport default Question;","import React, { useState } from 'react';\nimport Error from './Error';\nimport shortid from 'shortid'\n\nconst Form =({saveSpend, saveCreateSpend}) => {\n    \n    const [name, saveName] = useState('');\n    const [quantity, saveQuantity] = useState(0);\n    const [error, saveError] = useState(false); \n    \n    //when user adds his spends\n\n    const adSpend = e => {\n        e.preventDefault();\n\n        //validate \n        if( quantity <1 || isNaN(quantity) || name.trim() === '')\n        {\n            saveError(true);\n            return;\n        }\n\n        saveError(false);\n\n        //Build the spend\n\n        const spend = {\n            name,\n            quantity,\n            id: shortid.generate()\n        }\n        //console.log(spend)\n\n        //pass the spend to the main component.\n        saveSpend(spend);\n        saveCreateSpend(true)\n        //Reset form \n\n        saveName(' ')\n        saveQuantity(0)\n\n        \n\n    }\n\n    return(\n        <form\n            onSubmit = {adSpend}        \n        >\n            <h2>add your expenses here</h2>\n\n            {error ? <Error mensaje=\"Ambos campos son obligatorios o \n            Presupuesto Incorrecto\" /> : null}\n\n\n            <div className=\"campo\">\n                <label>Expense</label>\n\n                <input\n                type=\"text\"\n                className=\"u-full-width\"\n                placeholder=\"Ej. Food \"\n                value={name}\n                onChange={e => saveName(e.target.value)}\n                />\n                \n            </div>        \n\n            <div className=\"campo\">\n                <label>Amount</label>\n                <input\n                type=\"number\"\n                className=\"u-full-width\"\n                placeholder=\"Ej. 300 \"\n                value={quantity}\n                onChange={e=> saveQuantity(parseInt(e.target.value, 10))}\n                />\n            </div>\n            \n            <input\n                type=\"submit\"\n                className=\"button-primary u-full-width\"\n                value=\"Add Expense\"\n                />\n        </form>\n\n\n    );\n}\n\nexport default Form;","import React from 'react';\n\nconst Spend = ({spend}) => (\n    <li className=\"gastos\">\n        <p>\n            {spend.name}\n\n            <span className=\"gasto\">$ {spend.quantity}  </span>\n        </p>\n    </li>\n);\n \nexport default Spend;","import React from 'react';\nimport Spend from './Spend'\n\n\nconst List = ( {spends}) => (\n    <div className=\"gastos-realizados\">\n        <h2>List</h2>\n        {spends.map(spend => (\n            <Spend\n                key={spend.id}\n                spend={spend}\n            />\n        ))}\n\n    </div>\n)\n \nexport default List;","export const checkInventory = (inventory, lefting) => {\n    let classType;\n\n    if ( (inventory/4) > lefting){\n        classType = 'alert alert-danger';\n    }else if ( (inventory/2) > lefting){\n        classType = 'alert alert-warning';\n    }else{\n        classType = 'alert alert-success';\n    }\n\n    return classType\n\n}","import React, { Fragment} from 'react';\nimport { checkInventory } from '../helper';\nconst InventoryControl= ({inventory, lefting}) => {\n    return ( \n        <Fragment>\n            <div className=\"alert alert-primary\">\n                Inventory: ${inventory}\n            </div>\n            <div className={checkInventory(inventory, lefting)}>\n                Lefting: ${lefting}\n            </div>\n        </Fragment>\n     );\n} \n \nexport default InventoryControl;","import React, {useState, useEffect} from 'react';\nimport Question from './components/Question';\nimport Form from './components/Form';\nimport List from './components/List';\nimport InventoryControl from './components/InventoryControl';\n\n\nfunction App() {\n\n  //define state\n  const [inventory, saveInventory]=useState(0);\n  const [lefting, saveLefting]= useState(0);\n  const [showQuestion, updateQuestion] =useState(true);\n  const [spends, saveSpends] = useState([]);\n  const [spend, saveSpend] = useState({})\n  const [createSpend, saveCreateSpend] = useState(false)\n\n//useEffect update lefting\n\nuseEffect(() =>{\n  if(createSpend){\n\n    //adds new inventory \n    saveSpends([\n      ...spends,\n      spend\n    ]);\n    \n    //reduce inventory\n\n    const inventoryLefting = lefting -spend.quantity;\n    saveLefting(inventoryLefting)\n\n    //Reset to false\n    saveCreateSpend(false)\n    \n    \n  }\n}, [spend, createSpend, spends, lefting]);\n\n  // when user adds a new spend\n  // const addNewSpend = spend => {\n  //   saveSpends([\n  //     ...spends,\n  //   spend\n  //   ])\n\n  // }\n\n\n\n  return (\n      <div className=\"container\">\n        <header>\n          \n            <h1>Inventory</h1>\n            <div className=\"contenido-principal contenido\">\n              {showQuestion ? \n                (<Question\n                saveInventory={saveInventory}\n                saveLefting={saveLefting}\n                updateQuestion={updateQuestion}\n                />) \n              : ( \n                <div className=\"row\">\n                  <div className=\"one-half column\">\n                  <Form\n                    // addNewSpend={addNewSpend}\n                    saveSpend={saveSpend}\n                    saveCreateSpend={saveCreateSpend}\n                  />\n                  </div>\n                  <div className=\"one-half column\">\n                  \n                    <List\n                      spends={spends}\n                    />\n                    <InventoryControl \n                      inventory={inventory}\n                      lefting={lefting}\n                    />\n\n                  </div>\n                </div>\n                )\n              }\n            \n           \n            </div>\n        </header>\n\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}